## 1. MVC 모델 1과 MVC 모델 2의 차이점에 대해 설명하시오.

#### 답변

MVC란 Model, View, Controller의 줄임말로써,
MVC는 사용자와 상호작용하는 S/W를 디자인함에 있어 세가지 요소로 쪼개어 하는 것을 의미합니다.

-   MVC 모델 1은 웹 브라우저의 요청을 JSP 페이지가 받아서 처리 하는 구조입니다. JSP 페이지 안에서 모든 정보를 표현(view)하고 저장(model)하고 처리(control)되므로 재사용이 힘들고, 읽기도 힘들어 가독성이 떨어집니다. 주로 중소형 프로젝트에 적합한 모델입니다.
-   MVC 모델 2는 모델 1과 달리 웹 브라우저의 요청을 하나의 서블릿이 받게 됩니다. 서블릿은 웹 브라우저의 요청을 알맞게 처리한 뒤, 그 결과를 JSP로 포워딩 합니다. 처리 작업의 모듈화로 유지보수가 쉬워지는 반면 개발 시간이 늘어난다는 단점을 가지고 있습니다.

---

## 2. Vue 라이프사이클에 대해 설명해주세요.

#### 답변

-   new Vue()

    실행시 vue의 인스턴스를 생성한다.

-   beforecreate

    Vue의 라이프사이클 훅중에서 가장먼저 실행되는 훅으로, data와 events(vm.on,vm.once, vm.off,vm.emit)가 설정되기 전에 실행되기 때문에 사용시 오류가 난다.

-   created

    data와 methods, computed 들이 완성된 시점이기 때문에 해당 event를 사용할 수 있다. 주로 서버와의 데이터처리에서 많이 사용되는 훅이다.

-   beforeMounted

    아직 DOM에 접근할수 없는 단계로, 보통 data처리는 created에서 처리하기때문에 거의 사용하지 않는다.

-   mounted

    DOM에 접근할 수 있는 단계로, 이말은 모든 DOM이 생성된 이후에 접근가능하다는 말이다.

-   beforeUpdated

    업데이트 된 값들을 가지고 있는 상태이기 때문에, 업데이트 된 값으로 다른 값들을 업데이트 할 수 있다.

-   updated

    컴포넌트의 데이터가 변하여 재 렌더링이 일어나 후에 실행된다. mounted와 마찬가지로 돔이 업데이트 완료된 상태이므로 돔 종속적인 연산을 할 수 있다.

-   beforedestroy

    컴포넌트 해체되기 전 호출된다. Destroyed가 호출되기전에 주로 이벤트 리스너를 제거할 때 많이 사용한다.

-   detroyed

    모든 컴포넌트 해체되고 난 후 호출되는 훅으로, 컴포넌트의 모든 리스너가 해제되고 자식컴포넌트까지 해제된다.

---

## 3. null과 undefined의 차이에 대해 설명해주세요.

#### 답변

이 두 타입은 모두 기본적으로는 '값이 없음'을 의미한다. 그 중 undefined는 값이 할당되지 않은 변수를 의미한다. 즉 var나 let 등의 키워드를 통해 신규 생성된 변수의 기본값은 undefined라는 의미이다.

null은 명시적으로 값이 비어있음을 나타내는데 사용한다. 아무것도 참조하고 있지 않은 변수라는 의도를 직접적으로 반영하고자 할 때 null을 사용한다.

---

## 4. ’==’와 ‘===’의 차이

#### 답변

-   '=='연산자는 동등 연산자로, 피연산자가 서로 다른 타입이면 타입을 강제로 변환시켜 비교한다.

    '1' == 1 // true

-   '===' 연산자는 일치 연산자로, 두 피연산자를 더 정확하게 비교한다.

    '1' === 1 //false

---

## 5. 타입과 인터페이스의 차이에 대해서 설명해주세요

#### 답변

인터페이스는 자신의 이름을 중복 선언하여 extends 키워드를 사용하지 않더라도 확장이 가능하지만,
타입의 경우 중복 선언을 통해 확장할 수 없다. (& 연산자를 사용하여 확장해야 한다)
객체에만 쓰는 용도라면 interface를 사용하는 것이 좋을 것이다.

---

## 6. Call, Apply, Bind 함수에 대해 설명해주세요 (차이점 포함)

#### 답변

this가 함수 호출식에 따라 객체를 가르킨다면 call, apply, bind는 함수가 직접 실행문맥을 결정한다. 그 중에 call, apply는 함수를 호출해 실행하는데, 둘의 차이점은 call은 함수에서 지정된 파라미터 형식대로 받지만, apply는 함수의 파라미터를 배열 형태로 넣어야 된다는 것이 차이점이다. bind는 이 둘과 다르게 새 함수를 만들어 변수에 저장한다.

---

## 7. Parameter와 Argument의 차이를 설명해 주세요.

#### 답변

-   Parameter: 함수를 선언할 때 사용된 변수
-   Argument: 함수가 호출되었을 때 함수의 파라미터로 전달된 실제 값

---

## 8. Call By Value와 Call By Reference 차이를 설명해 주세요.

#### 답변

-   Call By Value
    인자로 받은 값을 복사하여 처리하는 방식으로,
    Call By Value에 의해 넘어온 값을 증가시켜도 원래의 값이 보존된다. 또한
    값을 복사하여 넘기기 때문에 메모리 사용량이 늘어난다.
-   Call By Reference
    인자로 받은 값의 주소를 참조하여 직접 값에 영향을 주는 방식으로,
    값을 복사하지 않고 직접 참조하기 때문에 속도가 빠르다. 또한
    원래의 값에 영향을 주는 리스크가 존재한다.

---

## 9. XSS가 무엇이며 어떻게 하면 막을 수 있나요?

#### 답변

Corss-site Scripting (XSS)는 클라이언트측을 대상으로 한 공격이며, 웹사이트에서 의도치 않은 스크립트를 넣는 기법이다. 게시판을 포함한 웹에서 스크립트 언어를 삽입해 개발자가 의도하지 않은 기능을 작동시키는 것을 말한다.

XSS를 방지하는 법

데이터를 입력할 때, DB에 insert할 때, select할 때, 출력할 때 모두 필터를 거치게 하여 XSS 공격을 방어할 수 있다.

---

## 10. 테스트 주도 개발 (Test Driven Development)이 무엇인지 설명해주세요.

#### 답변

개발 시 테스트 케이스를 작성하고 그것을 통과하는 코드를 만드는 과정을 반복하면서 해당 부분이 제대로 동작하는지에 대한 피드백을 적극적으로 받는 개발 방식이다.

-   장점: 코드의 유지보수가 용이해진다. (테스트 코드를 작성하는 것이 개발 문서의 작성 과정의 일환이 되므로) 결과적으로 프로그래밍 시간이 단축된다. (초기에는 실제 실행 코드 + 테스트 코드 두 부분을 동시에 작성하므로 시간이 오래 걸리는것 처럼 보이지만 추후 디버깅 과정이 현저히 줄어들어 효율성은 오히려 높아짐)

-   TDD 과정: 테스트 코드 우선 작성(무조건 ‘실패’가 뜨도록) > ‘성공’이 나올 수 있는 최소한의 실행 코드 작성 > 테스트와 병행하면서 실행 코드를 리팩토링(추가 기능 구현, 예외 처리, 중복 로직 제거 등)

-   자바스크립트의 대표적 테스트 프레임워크로 Jest, Mocha, Jasmin 등이 있다.

---

## 11. 쿠키와 세션 스토리지, 로컬 스토리지의 차이를 설명해 주세요.

#### 답변

기본적으로 쿠키와 로컬 스토리지, 세션 스토리지는 모두 브라우저에서 데이터 저장소의 역할을 하는 것들이다. 웹에서 로그인을 하기 위해서는 토큰을 발급받아 API를 호출해야 한다. 하지만 반복되는 작업을 계속 하게 되는 것이 비효율적이고, 이를 보완하기 위해 쿠키를 서버와 클라이언트에 생성해서 토큰 발급 없이 쿠키만 가지고 서버에 요청을 할 수 있게 된다. 쿠키는 저장 공간이 4KB로 작은 편인데 이러한 단점을 보완하여 만든 것이 웹 스토리지이다.

웹 스토리지는 서버에 클라이언트 데이터를 저장하지 않는다. 웹 스토리지에는 로컬 스토리지와 세션 스토리지가 있는데 로컬 스토리지는 브라우저에 정보가 계속해서 남아있는 반면, 세션 스토리지는 해당 세션이 끝나면, 즉 브라우저가 닫히면 데이터가 사라진다. 웹 스토리지는 데스크탑 기준 5~10MB의 저장 공간을 가지고 있어서 쿠키에 비해 훨씬 저장공간이 크다는 장점이 있다. 웹 스토리지는 반면 HTML5부터 지원하기 때문에 이전 브라우저에서는 지원이 되지 않는다는 단점이 있다.

---

## 12. 절차 지향과 객체 지향에 대해서 설명하세요.

#### 답변

-   절차 지향 프로그래밍 (Procedural Programming):
    물이 위에서 아래로 흐르는 것처럼 순차적인 처리가 중요시되는 프로그래밍 기법이며,
    C가 대표적인 절차 지향 프로그래밍 언어다. 컴퓨터의 처리구조와 유사해 실행속도가 빠르지만
    디버깅이 어렵다.
-   객체 지향 프로그래밍 (Object Oriented Programming):
    실제 세계를 표방하여 데이터와 절차를 하나의 덩어리로 처리하는 프로그래밍 기법이다.
    Java, Python, C++이 대표적인 객체 지향 프로그래밍 언어다.
    객체 지향 프로그래밍은 기존에 짜여진 코드를 재사용하기 용이하며 디버깅이 쉽다. 단, 처리 속도가 느리며 설계에 많은 노하우와 시간이 필요하다.
    객체 지향 프로그래밍은 아래의 네가지 특징을 가진다.
    추상화: 객체가 가진 공통의 속성이나 기능을 묶어 명시적인 이름을 부여하는 것을 말한다.
    캡슐화: 관련된 데이터와 코드를 하나로 묶은 것으로 데이터를 감추고 외부와의 상호작용은 메소드를 통하는 방법이다.
    상속: 이미 작성된 클래스를 이어 받아서 새로운 클래스를 생성하는 것으로, 기존 코드를 재활용하는 것을 말한다.
    다형성 (Polymorphism): 같은 코드로 다른 행위를 하는 것을 말한다. 이를 가능케하는 것이 Overriding과 Overloading이다.

---

## 13. 컴파일 에러와 런타입 에러 차이점을 설명해보세요.

#### 답변

-   컴파일 에러(Compile Error)는 컴파일 시 발생하는 에러입니다. 컴파일러는 구문 오류로 프로그램을 컴파일 할 수 없다는 뜻입니다. 대체로 문법상의 오류로 발생하며 에러가 발생한 부분을 개발자에게 알려줍니다.

컴파일타임 에러의 유형으로는 대표적으로 아래와 같습니다.

1. Syntax error(구문 에러) - ';'이누락된 문법 에러

2. 괄호가 안 맞는 등 구문 에러

3. classpath에 누락 된 클래스(컴파일 시)

-   런타임 에러(Runtime Error)는 프로그램 실행 시 발생하는 에러입니다. 프로그램이 컴파일 된 후 실행하면서 에러가 발생합니다. 대체로 개발 시 설계 미숙(논리적)으로 발생하는 에러이며, 에러 발생 시 개발자가 역추적하여 원인을 확인해야 합니다.

런타임 에러의 유형으로는 대표적으로 아래와 같습니다.

1. Nullpointer

2. 0으로 나눈 경우

3. 무한루프 등

---

## 14. 이상현상이란 무엇이며, 이상의 종류에 대해 설명하세요.

#### 답변

릴레이션에서 일부 속성들의 종속으로 인해 데이터의 중복이 발생하는 것을 말한다.

-   삽입 이상은 원하지 않는 자료가 삽입된다든지, 삽입하는데 자료가 부족해 삽입이 되지 않아 발생하는 문제점을 말한다.

-   삭제 이상은 하나의 자료만 삭제하고 싶지만, 그 자료가 포함된 튜플 전체가 삭제됨으로 원하지 않는 정보 손실이 발생하는 문제점을 말한다.

-   갱신 이상은 정확하지 않거나 일부의 튜플만 갱신되어 정보가 모호해지거나 일관성이 없어져 정확한 정보 파악이 되지 않는 문제점을 말한다.

---

## 15. 테이블을 드롭(DROP)하는 것과 자르는 것(Truncate), 그리고 테이블 내 모든 레코드를 삭제(Delete)하는 것의 차이점은 무엇인가요?

#### 답변

-   DELETE 명령어는 데이터는 지워지지만 테이블 용량은 줄어들지 않는다. 원하는 데이터만 지울 수 있다. 삭제 후 RollBack 가능하다.

-   TRUNCATE 명령어는 용량이 줄어들고, 인덱스 등도 모두 삭제된다. 테이블은 삭제하지는 않고 데이터만 삭제한다. 한꺼번에 다 지워야 한다. 삭제 후 절대 되돌릴 수 없다.

-   DROP 명령어는 테이블 전체를 삭제,공간, 객체를 삭제한다. 삭제 후 절대 되돌릴 수 없다.

---

## 16. 무결성에는 어떤 것이 있는지?

#### 답변

-   개체 무결성 : 기본키는 NULL값이 올 수 없으며, 중복될 수 없다.

-   참조 무결성 : 외래키는 NULL값이 올 수 있으며, 부모 테이블의 기본키에 종속되어야 한다.

-   도메인 무결성, 고유(Unique)무결성, NULL 무결성, 키 무결성이 있다.

---

## 17. 페이징과 세그먼테이션이 무엇이며, 둘의 차이점에 대해 설명하세요.

#### 답변

두 가지 모두 가상 메모리를 관리하는 기법이다.

-   페이징:프로세스의 주소 공간을 동일한(고정된) 사이즈의 페이지 단위로 나누어 물리적 메모리에 불연속적으로 저장하는 방식이다. 페이징에서는 내부 단편화가 발생하는데, 프로세스 크기가 페이지 크기의 배수가 아닐 경우, 마지막 페이지는 한 프레임(페이지)를 다 채울 수 없어서 발생하는 공간으로 메모리 낭비의 원인이 된다.

-   세그먼테이션: 프로세스를 서로 크기가 다른 논리적인 블록 단위인 '세그먼트(Segment)'로 분할하고 메모리에 배치하는 것을 말하며, 각 세그먼트의 크기는 일정하지 않다. 세그먼테이션에서는 외부 단편화가 발생하는데, 메모리가 할당 및 해제 작업의 반복으로 중간중간에 생긴 사용하지 않는 메모리가 존재해서 총 메모리 공간은 충분하지만 실제로 할당할 수 없는 상황이 생긴다.

---

## 18. GPU와 CPU의 차이에 대해 설명하세요. (K사 전화면접)

#### 답변

CPU는 입출력장치, 기억장치, 연산장치 등을 포함한 컴퓨터 리소스를 관리하는 최상위 계층의 중앙처리장치이다. 따라서 데이터 처리와 더불어 프로그램에서 작업의 우선순위를 지정하고 전환하며 가상 메모리를 관리하는 등의 역할을 한다. CPU는 직렬 처리에 최적화된 몇 개의 코어로 구성되어 있다.

GPU는 반복적이고 비슷한 대량의 연산을 수행하며 이를 병렬적(parallel)으로 나누어 작업하기 때문에 CPU에 비해 속도가 압도적으로 빠르다. GPU는 병렬 처리용으로 설계된 수 천 개의 보다 소형이고 효율적인 코어로 구성되어 있다.

---

## 19. 컴파일러와 인터프리터의 차이가 무엇인가요? (N사 전화면접)

#### 답변

컴파일러와 인터프리터 모두 고레벨 언어를 기계어로 변환하는 역할을 수행하지만 차이점은 컴파일러의 경우 전체 코드를 보고 명령어를 수집하고 재구성하는 반면, 인터프리터는 소스코드의 각 행을 연속적으로 분석하며 실행한다. 인터프리터는 고레벨 언어를 중간 레벨 언어로 한 번 변환하고 이를 각 행마다 실행하기 때문에 일반적으로 컴파일러가 인터프리터보다 실행 시간이 빠른 경우가 많다. java의 경우 .java 파일을 .class 파일로 자바 컴파일러가 컴파일을 하고, .class 파일을 기계어로 인터프리터가 변환하는 것이다.

---

## 20. 프로세서(CPU) 스케줄링이란 무엇이고, 어떤 방법이 있는지?

#### 답변

-   스케줄링(Scheduling)이란?

프로세스가 생성되어 실행될 때 필요한 시스템의 여러자원을 해당 프로세스에게 할당하는 작업을 의미한다.
CPU나 자원을 효율적으로 사용하기 위해 스케줄링 알고리즘을 이용한다.
장기 스케줄링, 중기 스케줄링, 단기 스케줄링으로 구분된다.

-   선점 스케줄링

: 하나의 프로세스가 CPU를 할당받아 실행하고 있을 때 우선순위가 높은 다른 프로세스가 CPU를 강제로 빼앗아 사용할 수 있는 스케줄링 기법.

주로 빠른 응답시간을 요구하는 대화식 시분할 시스템에 사용된다.
장점 - 우선순위가 높은 프로세스를 빠르게 처리할 수 있다.
단점 - 우선순위가 높은 프로세스가 생길 때마다 계속 문맥교환이 일어나므로 오버헤드가 크다.

-   비선점 스케줄링

: 이미 할당된 CPU를 다른 프로세스가 강제로 빼앗아 사용할 수 없는 스케줄 기법. 프로세스가 CPU를 할당받을 경우 해당 프로세스가 완료될 때까지 인터럽트 없이 CPU를 사용한다.

일괄처리 방식에 적합하다.
장점 - 프로세스 응답 시간을 예측하기 쉽다.
단점 - 중요한 작업(짧은 작업)이 중요하지 않은 작업(긴 작업)을 기다리는 경우가 발생할 수 있다.

---

## 21. 병행 처리를 위한 프로세스 동기화 기법에 어떤 것이 있는지 설명하고, 차이점을 설명해주세요.

#### 답변

-   [tip] 임계 구역(Critical Section)이란?
    여러 프로세스가 데이터를 공유하며 수행될 때, 각 프로세스에서 공유 데이터를 접근하는 프로그램 코드 부분
    공유 데이터를 여러 프로세스가 동시에 접근할 때 잘못된 결과를 만들 수 있기 때문에,
    한 프로세스가 임계 구역을 수행할 때는 다른 프로세스가 접근하지 못하도록 해야 한다.

-   뮤텍스(Mutex)
    동시 프로그래밍에서 공유 불가능한 자원의 동시 사용을 피하기 위해 사용하는 알고리즘
    임계구역(Critical Section)을 가진 스레드들의 실행시간(Running Time)이 서로 겹치지 않고 각각 단독으로 실행(상호배제\_Mutual Exclution)되도록 하는 기술
    한 프로세스에 의해 소유될 수 있는 Key를 기반으로 한 상호배제 기법

-   세마포어(Semaphore)
    멀티 프로그래밍 환경에서 공유된 자원에 대한 접근을 제한하는 방법

-   뮤텍스와 세마포어의 차이는?
    뮤텍스: 한 쓰레드, 프로세스에 의해 소유될 수 있는 Key🔑를 기반으로 한 상호배제기법
    세마포어: Signaling mechanism. 현재 공유자원에 접근할 수 있는 쓰레드, 프로세스의 수를 나타내는 값을 두어 상호배제를 달성하는 기법

---

## 22. 로드밸런싱이란 무엇인지 설명?

#### 답변

로드 밸런싱은 분산식 웹 서비스로,
여러 서버에 부하(Load)를 나누어주는 역할을 한다.
Load Balancer를 클라이언트와 서버 사이에 두고,
부하가 일어나지 않도록 여러 서버에 분산시켜주는 방식이다.
서비스를 운영하는 사이트의 규모에 따라 웹 서버를 추가로 증설하면서
로드 밸런서로 관리해주면 웹 서버의 부하를 해결할 수 있다.

---

## 23. 리눅스에서 시스템 콜과 서브루틴의 차이는?

#### 답변

커널은 하드웨어를 둘러싸고 있음 즉, 커널은 하드웨어를 제어하기 위한 일종의 API와 같음
서브루틴(Subr>outine)은 우리가 프로그래밍할 때 사용하는 대부분의 API를 얘기하는 것

-   서브루틴과 시스템 콜의 차이는?
    서브루틴이 시스템 콜을 호출하고, 시스템 콜이 수행한 결과를 서브루틴에 보냄
    시스템 콜 호출 시, 커널이 호출되고 커널이 수행한 임의의 결과 데이터를 다시 시스템 콜로 보냄

---

## 24. 클로저(Closure)에 대해 설명해주세요.

#### 답변

자바스크립트는 함수 안에서도 함수를 선언할 수 있다. 먼저 선언된 함수를 외부함수라 정의하고, 이후에 정의된 함수를 내부함수라고 정의한다면, 기본적으로 내부함수는 외부함수의 요소에 접근이 가능하다. 이 외부함수의 수명이 다해서 외부함수가 종료(리턴)된 후에도 외부함수의 변수에 내부함수가 접근 할 수 있는 자바스크립트의 매커니즘을 클로저라고 한다.
